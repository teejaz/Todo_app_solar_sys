AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    # Minimal memory for cost optimization
    MemorySize: 256  # Reduced from 512MB
    Timeout: 15      # Reduced from 30s
    Runtime: python3.11  # Latest runtime for better performance
    Environment:
      Variables:
        # Enable smart fallback to reduce API costs
        USE_FALLBACK: "true"

Resources:
  AIGoalVisualizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: lambda_function.lambda_handler
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
          GEMINI_API_KEY: !Ref GeminiApiKey
      Events:
        # Single catch-all event to reduce API Gateway costs
        CatchAll:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        Root:
          Type: Api
          Properties:
            Path: /
            Method: ANY
      # Enable provisioned concurrency only if needed (costs extra)
      # ProvisionedConcurrencyConfig:
      #   ProvisionedConcurrencyLevel: 1

  # Optional: CloudWatch Log Group with retention to control costs
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AIGoalVisualizerFunction}'
      RetentionInDays: 7  # Keep logs for 7 days only

Parameters:
  OpenAIApiKey:
    Type: String
    Description: OpenAI API Key (optional - app works without it)
    Default: "dummy"
    NoEcho: true
  GeminiApiKey:
    Type: String
    Description: Gemini API Key (optional - app works without it)
    Default: "dummy"
    NoEcho: true

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  EstimatedMonthlyCost:
    Description: "Estimated monthly cost for low usage"
    Value: "$0-5 USD (first 1M requests free)"
